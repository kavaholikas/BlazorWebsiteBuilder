<li class="fg-list-item fg-flex-row">
    <div>
        <div class="fg-input-container">
            <label class="fg-label-100">Property:</label>
            <input type="text" @bind="Property" class="fg-input"/>
        </div>
        <div class="fg-input-container">
            <label class="fg-label-100">Value:</label>
            <input type="text" @bind="Value" class="fg-input"/>
        </div>
    </div>

    <div>
        <div class="fg-attribute-button-container">
            <button @onclick="Update" class="fg-button">Update</button>
            <button @onclick=@(() => RemoveRule?.Invoke(Rule.Id)) class="fg-button">Remove</button>
        </div>
        <div class="fg-attribute-button-container">
            <button class="fg-button" @onclick=@(() => MoveRule?.Invoke(Rule.Id, true))>&uarr;</button>
            <button class="fg-button" @onclick=@(() => MoveRule?.Invoke(Rule.Id, false))>&darr;</button>
        </div>
    </div>
</li>

@code {
    [Parameter]
    public Rule Rule { get; set; }

    [Parameter]
    public Action<Guid, string, string> UpdateRule { get; set; }

    [Parameter]
    public Action<Guid> RemoveRule { get; set; }

    [Parameter]
    public Action<Guid, bool> MoveRule { get; set; }

    public string Property { get; set; }
    public string Value { get; set; }

    protected override void OnParametersSet()
    {
        base.OnParametersSet();
        Property = Rule.Property;
        Value = Rule.Value;
    }

    public void Update()
    {
        if (string.IsNullOrEmpty(Property) || string.IsNullOrEmpty(Value))
        {
            return;
        }

        UpdateRule?.Invoke(Rule.Id, Property, Value);
    }
}

